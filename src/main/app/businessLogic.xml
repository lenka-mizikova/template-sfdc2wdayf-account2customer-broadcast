<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:spring="http://www.springframework.org/schema/beans" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" 
	xmlns:wd-revenue="http://www.mulesoft.org/schema/mule/wd-revenue"
	xmlns:core="http://www.mulesoft.org/schema/mule/core"
	xmlns="http://www.mulesoft.org/schema/mule/core" 
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:batch="http://www.mulesoft.org/schema/mule/batch"
	xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/wd-revenue http://www.mulesoft.org/schema/mule/wd-revenue/current/mule-wd-revenue.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">
	<batch:job name="syncAccountsBatch">
		<batch:threading-profile poolExhaustedAction="WAIT" />

		<batch:process-records>
			<batch:step name="getCustomerInWorkdayStep">
				<enricher doc:name="Enrich payload with 'wdayfCustomer'"
					source="#[payload]" target="#[payload.wdayfCustomer]">
                    <processor-chain doc:name="Processor Chain">
                        <dw:transform-message doc:name="Create GetCustomerRequestType">
                            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	requestCriteria: [{
		customerReferenceID: payload.Id
	}],
	responseGroup: [{
		includeCustomerData : true,
		includeReference: true
	}]
} as :object {class : "com.workday.revenue.GetCustomersRequestType"}]]></dw:set-payload>
                        </dw:transform-message>
                        <wd-revenue:get-customers config-ref="Workday_Revenue_Management" doc:name="Get Customer by ID"/>
                    </processor-chain>

				</enricher>
			</batch:step>
			<batch:step name="upsertWorkdayCustomer">
                <logger message="Upserting Customer with ID:  #[payload.Id], Name: #[payload.Name]" level="INFO" doc:name="Log Upsert"/>
                <dw:transform-message doc:name="Map to PutCustomerRequestType">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
%function countryLookup(sfdcCountry) {
	(country: 'USA') when sfdcCountry == 'USA' //add new line like this for different countries
} unless sfdcCountry is :null otherwise country: null

%function stateLookup(sfdcState) {
	(state: 'USA-CA') when sfdcState == 'CA' //add new line like this for different states
} unless sfdcState is :null otherwise state: null

%var defaultIndustry = "CUSTOMER_CATEGORY-3"
%function industryLookup(sfdcIndustry) {
	(industry: 'CUSTOMER_CATEGORY-6')   when sfdcIndustry == 'Biotechnology', 
	(industry: 'CUSTOMER_CATEGORY-7')   when sfdcIndustry == 'Retail',
	(industry: 'CUSTOMER_CATEGORY-4-8') when sfdcIndustry == 'Manufacturing',
	(industry: 'CUSTOMER_CATEGORY-4')   when sfdcIndustry == 'Hospitality',
	(industry: 'CUSTOMER_CATEGORY-5')   when sfdcIndustry == 'Technology',
	(industry: 'CUSTOMER_CATEGORY-1')   when sfdcIndustry == 'Finance',
	(industry: 'CUSTOMER_CATEGORY-6-9') when sfdcIndustry == 'Healthcare'
} unless sfdcIndustry is :null otherwise industry: defaultIndustry
---
{
    "addOnly": null,
    "customerData": {
        "businessEntityData": {
            "businessEntityName": payload.Name,
            "contactData": {
                "addressData": [
                    {
                        "addressLineData": [{
                            "descriptor": null,
                            "type": "ADDRESS_LINE_1",
                            "value": payload.BillingStreet default p('wdayf.street')
                        }],
                        "countryReference": {
                            "descriptor": null,
                            "ID": [{
                                "type": "ISO_3166-1_Alpha-3_Code",
                                "value": countryLookup(payload.BillingCountry).country default p('wdayf.country')
                            }]
                        },
                        "countryRegionReference": {
                            "descriptor": null,
                            "ID": [{
                                "type": "Country_Region_ID",
                                "value": stateLookup(payload.BillingState).state default p('wdayf.state')
                            }]
                        },
                        "effectiveDate": now as :date,
                        "municipality": payload.BillingCity default p('wdayf.city'),
                        "postalCode": payload.BillingPostalCode default p('wdayf.postalCode'),
                        "usageData": [
                            {
                                "public": false,
                                "typeData": [{
                                    "primary": true,
                                    "typeReference": {
                                        "ID": [{
                                            "type": "Communication_Usage_Type_ID",
                                            "value": "BUSINESS"
                                        }]
                                    }
                                }]
                            }
                        ]
                    }
                ],
                "phoneData": [{
                    "areaCode": null,
                    "countryISOCode": null,
                    "formattedPhone": null,
                    "internationalPhoneCode": null,
                    "phoneDeviceTypeReference": {
                        "descriptor": null,
                        "ID": [{
                            "type": "Phone_Device_Type_ID",
                            "value": "1063.5"
                        }]
                    },
                    "phoneExtension": null,
                    "phoneNumber": payload.Phone default p('wdayf.phone'),
                    "usageData": [{
                        "public": true,
                        "typeData": [{
                            "primary": true,
                            "typeReference": {
                                "descriptor": null,
                                "ID": [{
                                    "type": "Communication_Usage_Type_ID",
                                    "value": "BUSINESS"
                                }]
                            }
                        }]
                    }
                ]}
                ],
                "webAddressData": [
                    {
                        "usageData": [{
                            "public": null,
                            "typeData": [{
                                "primary": true,
                                "typeReference": {
                                    "ID": [{
                                        "type": "Communication_Usage_Type_ID",
                                        "value": "BUSINESS"
                                    }]
                                }
                            }]
                        }],
                        "webAddress": payload.Website when (payload.Website matches /http(s)?:\/\/.*/) 
            	                                      otherwise "http://" ++ payload.Website
                    }
                ]
            }
        },
        "customerCategoryReference": {
            "ID": [
                {
                    "type": "Customer_Category_ID",
                    "value": industryLookup(payload.Industry).industry default defaultIndustry
                }
            ]
        },
        "customerID": null,
        "customerName": payload.Name,
        "customerReferenceID": payload.Id
    },
    "customerReference": payload.wdayfCustomer.responseData[0].customer[0].customerReference
                         when (payload.wdayfCustomer.responseResults.totalResults == 1) 
                         otherwise null
} as :object {class: "com.workday.revenue.PutCustomerRequestType"}]]></dw:set-payload>
                </dw:transform-message>
				<wd-revenue:put-customer config-ref="Workday_Revenue_Management"
					doc:name="Upsert Customer" />
			</batch:step>

		</batch:process-records>
		<batch:on-complete>
            <json:object-to-json-transformer doc:name="Transform BatchJobInstance to JSON"/>
            <logger message="Migration process has finished: #[payload]" level="INFO" doc:name="Log 'Migration process has finished'"/>
		</batch:on-complete>
	</batch:job>
</mule>
